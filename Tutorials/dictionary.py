python_characters_dict = {
    # Keywords (reserved words in Python)
    "and": "Logical AND operator.",
    "as": "Used to create an alias while importing a module.",
    "assert": "Used for debugging purposes to test if a condition is true.",
    "break": "Terminates the current loop.",
    "class": "Defines a class.",
    "continue": "Skips the rest of the current iteration in a loop.",
    "def": "Defines a function.",
    "del": "Deletes an object.",
    "elif": "Else if, used in conditional statements.",
    "else": "Used in conditional statements, provides an alternative to 'if' and 'elif'.",
    "except": "Used in exception handling, catches exceptions.",
    "finally": "Defines a block of code that will run no matter what (in exception handling).",
    "for": "Starts a for loop.",
    "from": "Used in import statements to import specific parts of a module.",
    "global": "Used to declare a variable as global.",
    "if": "Starts an if statement.",
    "import": "Imports a module.",
    "in": "Used to check membership (e.g., in a list, tuple, etc.).",
    "is": "Used to test object identity.",
    "lambda": "Defines an anonymous function.",
    "None": "Represents the absence of a value (null in other languages).",
    "nonlocal": "Used to declare a variable as non-local (in nested functions).",
    "not": "Logical NOT operator.",
    "or": "Logical OR operator.",
    "pass": "A placeholder for future code, or to do nothing.",
    "raise": "Raises an exception.",
    "return": "Exits a function and optionally returns a value.",
    "try": "Defines a block of code to try to execute (in exception handling).",
    "while": "Starts a while loop.",
    "with": "Used for resource management (e.g., opening files).",
    "yield": "Used to return a value from a generator function.",
    
    # Data types
    "int": "Integer type.",
    "float": "Floating point number type.",
    "str": "String type.",
    "bool": "Boolean type.",
    "list": "List type (ordered, mutable collection).",
    "tuple": "Tuple type (ordered, immutable collection).",
    "set": "Set type (unordered collection with unique elements).",
    "dict": "Dictionary type (unordered collection of key-value pairs).",
    "NoneType": "The type of None (represents absence of a value).",

    # Comparison Operators
    "==": "Equality operator.",
    "!=": "Inequality operator.",
    ">": "Greater than operator.",
    "<": "Less than operator.",
    ">=": "Greater than or equal to operator.",
    "<=": "Less than or equal to operator.",
    "is": "Tests if two variables refer to the same object.",
    "is not": "Tests if two variables do not refer to the same object.",
    "in": "Checks if a value is contained in a collection.",
    "not in": "Checks if a value is not contained in a collection.",
    
    # Arithmetic Operators
    "+": "Addition operator.",
    "-": "Subtraction operator.",
    "*": "Multiplication operator.",
    "/": "Division operator.",
    "//": "Floor division operator.",
    "%": "Modulus (remainder) operator.",
    "**": "Exponentiation (power) operator.",
    
    # Assignment Operators
    "=": "Assignment operator (assigns value to variable).",
    "+=": "Increment operator (adds value to the variable).",
    "-=": "Decrement operator (subtracts value from the variable).",
    "*=": "Multiplication assignment operator.",
    "/=": "Division assignment operator.",
    "%=": "Modulus assignment operator.",
    "**=": "Exponentiation assignment operator.",
    "//=": "Floor division assignment operator.",
    
    # Bitwise Operators
    "&": "Bitwise AND operator.",
    "|": "Bitwise OR operator.",
    "^": "Bitwise XOR operator.",
    "~": "Bitwise NOT operator.",
    "<<": "Bitwise left shift operator.",
    ">>": "Bitwise right shift operator.",
    
    # Logical Operators
    "and": "Logical AND operator.",
    "or": "Logical OR operator.",
    "not": "Logical NOT operator.",
    
    # Other Symbols
    "(": "Parentheses for grouping expressions or function calls.",
    ")": "Closing parentheses.",
    "[": "Opening square bracket (used for lists, indexing).",
    "]": "Closing square bracket.",
    "{": "Opening curly brace (used for dictionaries and sets).",
    "}": "Closing curly brace.",
    ",": "Comma (used to separate items in a list, tuple, etc.).",
    ".": "Dot (used to access attributes or methods of an object).",
    ":": "Colon (used in defining functions, slicing, and in if-elif-else blocks).",
    ";": "Semicolon (not typically used in Python but separates multiple statements in a single line).",
    "#": "Hash (used to add comments).",
    "_": "Underscore (often used in variable names and function names, or to indicate 'ignored' values).",
    
    # Escape characters
    "\\n": "Newline character.",
    "\\t": "Tab character.",
    "\\r": "Carriage return character.",
    "\\\"": "Double quote.",
    "\\'": "Single quote.",
    
    # Function types
    "map": "Applies a function to all items in an iterable.",
    "filter": "Filters items in an iterable based on a function.",
    "reduce": "Applies a rolling function cumulatively to items in an iterable.",
    "zip": "Combines iterables into a single iterable of tuples.",
    "range": "Generates a sequence of numbers.",
    "enumerate": "Generates index-value pairs from an iterable.",
    
    # Exception Types
    "Exception": "Base class for all exceptions.",
    "ValueError": "Raised when a function receives an argument of the right type but inappropriate value.",
    "TypeError": "Raised when an operation or function is applied to an object of inappropriate type.",
    "IndexError": "Raised when an index is out of the range of a sequence.",
    "KeyError": "Raised when a dictionary key is not found.",
    "FileNotFoundError": "Raised when an attempt to open a file fails.",
    "ZeroDivisionError": "Raised when dividing by zero.",
}
